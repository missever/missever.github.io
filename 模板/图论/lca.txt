vector<int> g[maxn];
int depth = 0,bn = 0,b[maxn << 1];
int f[maxn << 1],dfn[maxn],dis[maxn];

void dfs(int u,int fa) {
    int tmp = ++depth;
    b[++bn] = tmp;
    f[tmp] = u;
    dfn[u] = bn;
    for (auto v:g[u]) {
        if (v == fa) continue;
        dis[v] = dis[u] + 1;
        dfs(v,u);
        b[++bn] = tmp;
    }
}

int st[maxn << 1][20];
int lg[maxn << 1];
void st_init() {
    for (int i = 2; i < maxn * 2; ++i) lg[i] = lg[i >> 1] + 1;
    for (int i = bn; i >= 1; --i) {
        st[i][0] = b[i];
        for (int j = 1; i + (1 << j) - 1 <= bn; ++j)
            st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
    }
}
int rmq(int l, int r) {
    int k = lg[r - l + 1];
    return min(st[l][k], st[r - (1 << k) + 1][k]);
}

int lca(int a,int b) {
    if(a == b) return a;
    if (dfn[a] > dfn[b]) swap(a,b);
    int k = rmq(dfn[a],dfn[b]);
    return f[k];
}

int main() {
    int u,v,i,m;
    scanf("%d",&n);
    for(i = 1; i < n; i++) {
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    rt = 1;
    dis[rt] = 1;
    dfs(1,0);
    st_init();
}


倍增求lca，复杂度(n+q)logn
可以实现动态加减叶子结点

vector<int> g[maxn];
int d[maxn],st[maxn][18];

void dfs(int u,int fa) {
    for(auto v:g[u]) {
	if(v == fa) continue;
        d[v] = d[u] + 1;
        st[v][0] = u;
        for(int i = 1;i < 18; i++) st[v][i] = st[st[v][i - 1]][i - 1];
        dfs(v,u);
    }
}

int lca(int u,int v) {
    if(d[u] > d[v]) swap(u,v);
    int x = d[v] - d[u];
    for(int i = 0;i < 18; i++) {
        if((x >> i) & 1) v = st[v][i];
    }
    if(u != v) {
        for(int i= 17;i >= 0; i--) {
            if(st[u][i] != st[v][i]) {
                u = st[u][i];
                v = st[v][i];
            }
        }
        u = st[u][0];
    }
    return u;
}