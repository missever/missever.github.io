const int mod = MAX;
const int msize = 2;
struct matrix
{
    int a[msize][msize];
    void clear()
    {
        memset(a,0,sizeof(a));
    }
    void setI()
    {
        for(int i = 0; i < msize; i++)
        {
            for(int j = 0; j < msize; j++) a[i][j] = (i == j);
        }
    }
    matrix operator *(const matrix &b) const
    {
        matrix tmp;
        tmp.clear();
        for(int i = 0; i < msize; i++)
        {
            for(int j = 0; j < msize; j++)
            {
                for(int k = 0; k < msize; k++)
                {
                    tmp.a[i][j] = add(tmp.a[i][j], mul(a[i][k], b.a[k][j]));
                }
            }
        }
        return tmp;
    }
    bool operator ==(const matrix &b) const
    {
        for(int i = 0; i < msize; i++)
        {
            for(int j = 0; j < msize; j++)
            {
                if(a[i][j] != b.a[i][j]) return false;
            }
        }
        return true;
    }
    bool pk()
    {
        for(int i = 0; i < msize; i++)
        {
            for(int j = 0; j < msize; j++)
            {
                if(i == j)
                {
                    if(a[i][i] != 1) return false;
                }
                else
                {
                    if(a[i][j] != 0) return false;
                }
            }
        }
        return true;
    }
};

matrix powt(matrix a,LL b)
{
    matrix r;
    r.setI();
    while(b)
    {
        if(b & 1) r = r * a;
        a = a * a;
        b >>= 1;
    }
    return r;
}