
void get_inv(int n,LL a[],LL b[])
{
    b[0] = quick_mod(a[0],P - 2,P);
    b[1]= 0;
    for(int m = 2; m <= n; m <<= 1)
    {
        copy(a,a + m,fa);
        fill(fa + m,fa + (m << 1),0);
        fill(b + m,b + (m << 1),0);
        NTT(fa,m << 1,1);
        NTT(b,m << 1,1);
        for(int i = 0; i < (m << 1); i++) b[i] = (2LL - fa[i] * b[i] % P + P) % P * b[i] % P;
        NTT(b,m << 1,-1);
        fill(b + m,b + (m << 1),0);
    }
}


void get_sqrt(int n,LL a[],LL b[])
{
    b[0] = sqrt(a[0] + 0.5);
    b[1]= 0;
    int invv = quick_mod(2,P - 2,P);
    for(int m = 2; m <= n; m <<= 1)
    {
        fill(b + m,b + (m << 1),0);
        get_inv(m,b,f);
        copy(a,a + m,fa);
        fill(fa + m,fa + (m << 1),0);
        NTT(fa,m << 1,1);
        NTT(f,m << 1,1);
        for(int i = 0; i < (m << 1); i++) f[i] = f[i] * fa[i] % P;
        NTT(f,m << 1,-1);
        for(int i = 0; i < m; i++) b[i] = (b[i] + f[i]) * invv % P;
        fill(b + m,b + (m << 1),0);
    }
}

//输入数组a和长度n
void solve(int n,LL a[])
{
    int m = 1;
    while(m <= n) m <<= 1;
    //memset(b,0,sizeof(b));
    //get_sqrt(m,a,b);//求a的平方根多项式b
    memset(f,0,sizeof(f));
    get_inv(m,b,f);//求a的逆元多项式b
}