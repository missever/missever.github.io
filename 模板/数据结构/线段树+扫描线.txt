//created by missever

#include<bits/stdc++.h>
#define MAX 1000000007
#define NN 100010
using namespace std;

struct edge {
    int l,r,h,d;
    bool operator<(const edge &a)const {
        return h<a.h;
    }
};
vector<edge>f;
vector<int>v;
int sum[NN<<2][15];
int mark[NN<<2];
int n,m,k;

int ff(int x) {
    int l,r,mid;
    l = 0;
    r = k;
    while(l <= r) {
        mid=(l + r) >> 1;
        if(v[mid] == x) return mid;
        if(v[mid] < x) l = mid + 1;
        else r = mid - 1;
    }
    return l;
}

void build(int root,int l,int r) {
    mark[root] = 0;
    memset(sum[root],0,sizeof(sum[root]));
    sum[root][0] = v[r+1] - v[l];
    if(l == r) return;
    int mid;
    mid = (l + r) >> 1;
    build(root<<1,l,mid);
    build(root<<1|1,mid + 1,r);
}

void pushup(int root,int l,int r) { //mÖØ¸²¸Ç
    int i;
    memset(sum[root],0,sizeof(sum[root]));
    if(mark[root] > m) sum[root][m+1] = v[r+1] - v[l];
    else if(l == r) sum[root][mark[root]] = v[r+1] - v[l];
    else if(l != r) {
        for(i = mark[root]; i <= m + 1; i++) sum[root][i] += sum[root<<1][i-mark[root]] + sum[root<<1|1][i-mark[root]];
        for(i = m - mark[root] + 2; i <= m + 1; i++) sum[root][m+1] += sum[root<<1][i] + sum[root<<1|1][i];
    }
}

void update(int l,int r,int root,int d,int ll,int rr) {
    if(l <= ll && r >= rr) {
        mark[root] += d;
        pushup(root,ll,rr);
        return;
    }
    int mid;
    mid = (ll + rr) >> 1;
    if(l <= mid) update(l,r,root<<1,d,ll,mid);
    if(r > mid) update(l,r,root<<1|1,d,mid+1,rr);
    pushup(root,ll,rr);
}

long long getans() { //fg = 0
    int l,r,i,tail;
    long long ans;
    k=0;
    ans=0;
    v.push_back(MAX);
    sort(f.begin(),f.end());
    sort(v.begin(),v.end());
    tail = v.size();
    for(i = 1; i < tail; i++) {
        if(v[i] != v[i-1]) v[++k] = v[i];
    }
    build(1,0,k);
    for(i=0; i< tail - 1; i++) {
        l = ff(f[i].l);
        r = ff(f[i].r) - 1;
        if(l <= r) update(l,r,1,f[i].d,0,k);
        ans += (long long) sum[1][m] * (f[i+1].h - f[i].h);
    }
    return ans;
}

int main() {
//    f.push_back(edge{x1,x2,y1,1});//ÒÔxÖá¼Ó±ß
//    f.push_back(edge{x1,x2,y2,-1});
//    v.push_back(x1);
//    v.push_back(x2);
    return 0;
}
